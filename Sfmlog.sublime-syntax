%YAML 1.2
---
name: Sfmlog
file_extensions: [sfmlog, sfml, sfmlib]
scope: source.mlog

contexts:
  main:
    - meta_scope: variable.other.mlog

    - match: '"'
      scope: punctuation.definition.string.begin.mlog
      push: double_quoted_string

    - match: '#'
      scope: punctuation.definition.comment.mlog
      push: line_comment

    - match: (?<!\w)(-)?[0-9.]+\b
      scope: constant.numeric.mlog

    - match: (?<!\w)(-)?[0-9]+(e)(-)?[0-9]+\b
      scope: constant.numeric.mlog

    - match: \b0x[0-9a-fA-F]+\b
      scope: constant.numeric.mlog

    - match: \b0b[01]+\b
      scope: constant.numeric.mlog

    - match: (?<!\w)%[0-9a-fA-F]{6,8}\b
      scope: constant.numeric.mlog

    - match: '@'
      scope: constant.other.mlog
      push: content_type

    - match: '(\$|<|>|<>)\b'
      scope: keyword.operator.mlog

    - match: \bnull\b
      scope: constant.language.mlog

    - match: \btrue\b
      scope: constant.language.mlog

    - match: \bfalse\b
      scope: constant.language.mlog

    - match: ^(\s)*(.)+:\s$
      scope: variable.function.mlog

    - match: ^(\s)*(op)\b
      scope: keyword.control.mlog
      push: instruction_op

    - match: ^(\s)*(jump)\b
      scope: keyword.control.mlog
      push: instruction_jump

    - match: ^(\s)*(draw)\b
      scope: keyword.control.mlog
      push: instruction_draw

    - match: ^(\s)*(radar)\b
      scope: keyword.control.mlog
      push: instruction_radar

    - match: ^(\s)*(control)\b
      scope: keyword.control.mlog
      push: instruction_control

    - match: ^(\s)*(lookup)\b
      scope: keyword.control.mlog
      push: instruction_lookup

    - match: ^(\s)*(ucontrol)\b
      scope: keyword.control.mlog
      push: instruction_ucontrol

    - match: ^(\s)*(uradar)\b
      scope: keyword.control.mlog
      push: instruction_uradar

    - match: ^(\s)*(ulocate)\b
      scope: keyword.control.mlog
      push: instruction_ulocate

    - match: ^(\s)*(getblock)\b
      scope: keyword.control.mlog
      push: winstruction_getblock

    - match: ^(\s)*(setblock)\b
      scope: keyword.control.mlog
      push: winstruction_setblock

    - match: ^(\s)*(status)\b
      scope: keyword.control.mlog
      push: winstruction_status

    - match: ^(\s)*(setrule)\b
      scope: keyword.control.mlog
      push: winstruction_setrule

    - match: ^(\s)*(message)\b
      scope: keyword.control.mlog
      push: winstruction_message

    - match: ^(\s)*(cutscene)\b
      scope: keyword.control.mlog
      push: winstruction_cutscene

    - match: ^(\s)*(fetch)\b
      scope: keyword.control.mlog
      push: winstruction_fetch

    - match: ^(\s)*(effect)\b
      scope: keyword.control.mlog
      push: winstruction_effect

    - match: ^(\s)*(makemarker)\b
      scope: keyword.control.mlog
      push: winstruction_makemarker

    - match: ^(\s)*(setmarker)\b
      scope: keyword.control.mlog
      push: winstruction_setmarker

    - match: ^(\s)*(set|packcolor|read|write|print|printflush|drawflush|getlink|sensor|wait|stop|end|ubind|spawn|spawnwave|explosion|setrate|getflag|setflag|setprop|sync|noop|format|localeprint)\b
      scope: keyword.control.mlog

    - match: ^(\s)*(mac|fun|call)\b
      scope: keyword.control.mlog
      push: sfinstruction_gen_call

    - match: ^(\s)*(defmac|deffun)\b
      scope: keyword.control.mlog
      push: sfinstruction_gen_define

    - match: ^(\s)*(if|while)\b
      scope: keyword.control.mlog
      push: sfinstruction_gen_condition

    - match: ^(\s)*(for)\b
      scope: keyword.control.mlog
      push: sfinstruction_for

    - match: ^(\s)*(pop)\b
      scope: keyword.control.mlog
      push: sfinstruction_pop

    - match: ^(\s)*(strop)\b
      scope: keyword.control.mlog
      push: sfinstruction_strop

    - match: ^(\s)*(strvar)\b
      scope: keyword.control.mlog
      push: sfinstruction_strvar

    - match: ^(\s)*(list)\b
      scope: keyword.control.mlog
      push: sfinstruction_list

    - match: ^(\s)*(table)\b
      scope: keyword.control.mlog
      push: sfinstruction_table

    - match: ^(\s)*(file)\b
      scope: keyword.control.mlog
      push: sfinstruction_file

    - match: ^(\s)*(import|pset|proc|block|type|strlabel|discard|log|error)\b
      scope: keyword.control.mlog

  double_quoted_string:
    - meta_scope: string.quoted.double.mlog
    - match: '"'
      scope: punctuation.definition.string.end.mlog
      pop: true

  line_comment:
    - meta_scope: comment.line.mlog
    - match: $
      pop: true

  content_type:
    - meta_scope: constant.other.mlog
    - match: ( |$)
      pop: true

  instruction_op:
    - match: ( )
      set:
      - match: \b(add|sub|mul|div|idiv|mod|pow|equal|notEqual|land|lessThan|lessThanEq|greaterThan|greaterThanEq|strictEqual|shl|shr|or|and|xor|not|max|min|angle|len|noise|abs|log|log10|floor|ceil|sqrt|rand|sin|cos|tan|asin|acos|atan|angleDiff)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  instruction_jump:
    - match: \$\b
      scope: keyword.operator.mlog
      set:
        - match: \b(\S)+\b
          scope: variable.function.mlog
          set:
            - match: ( )
              set:
              - match: \b(equal|notEqual|lessThan|lessThanEq|greaterThan|greaterThanEq|strictEqual|always)\b
                scope: keyword.operator.mlog
                pop: true
              - match: ( )
                pop: true
    - match: \b(\S)+\b
      scope: variable.function.mlog
      set:
        - match: ( )
          set:
          - match: \b(equal|notEqual|lessThan|lessThanEq|greaterThan|greaterThanEq|strictEqual|always)\b
            scope: keyword.operator.mlog
            pop: true
          - match: ( )
            pop: true

  instruction_draw:
    - match: ( )
      set:
      - match: \b(clear|color|col|stroke|line|rect|lineRect|poly|linePoly|triangle|image)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  instruction_radar:
    - match: ( )
      set:
      - match: \b(any|enemy|ally|player|attacker|flying|boss|ground)\b
        scope: keyword.operator.mlog
        push: instruction_radar2
        pop: true
      - match: \b
        push: instruction_radar2
        pop: true
          
  instruction_radar2:
    - match: ( )
      set:
      - match: \b(any|enemy|ally|player|attacker|flying|boss|ground)\b
        scope: keyword.operator.mlog
        push: instruction_radar3
        pop: true
      - match: \b
        push: instruction_radar3
        pop: true

  instruction_radar3:
    - match: ( )
      set:
      - match: \b(any|enemy|ally|player|attacker|flying|boss|ground)\b
        scope: keyword.operator.mlog
        push: instruction_radar4
        pop: true
      - match: \b
        push: instruction_radar4
        pop: true

  instruction_radar4:
    - match: ( )
      set:
      - match: \b(distance|health|shield|armor|maxHealth)\b
        scope: keyword.operator.mlog
        pop: true
      - match: \b
        pop: true

  instruction_control:
    - match: ( )
      set:
      - match: \b(enabled|shoot|shootp|config|color)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  instruction_lookup:
    - match: ( )
      set:
      - match: \b(block|unit|item|liquid)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  instruction_ucontrol:
    - match: ( )
      set:
      - match: \b(idle|stop|move|approach|boost|target|targetp|itemDrop|itemTake|payDrop|payTake|payEnter|mine|flag|build|getBlock|within|unbind|pathfind|autoPathfind)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  instruction_uradar:
    - match: ( )
      set:
      - match: \b(any|enemy|ally|player|attacker|flying|boss|ground)\b
        scope: keyword.operator.mlog
        push: instruction_uradar2
        pop: true
      - match: ( )
        push: instruction_uradar2
        pop: true

  instruction_uradar2:
    - match: ( )
      set:
      - match: \b(any|enemy|ally|player|attacker|flying|boss|ground)\b
        scope: keyword.operator.mlog
        push: instruction_uradar3
        pop: true
      - match: \b
        push: instruction_uradar3
        pop: true

  instruction_uradar3:
    - match: ( )
      set:
      - match: \b(any|enemy|ally|player|attacker|flying|boss|ground)\b
        scope: keyword.operator.mlog
        push: instruction_uradar4
        pop: true
      - match: \b
        push: instruction_uradar4
        pop: true

  instruction_uradar4:
    - match: ( )
      set:
      - match: \b(distance|health|shield|armor|maxHealth)\b
        scope: keyword.operator.mlog
        pop: true
      - match: \b
        pop: true

  instruction_ulocate:
    - match: ( )
      set:
      - match: \b(ore|spawn|damaged)\b
        scope: keyword.operator.mlog
        pop: true

      - match: \b(building)\b
        scope: keyword.operator.mlog
        push: instruction_ulocate2
        pop: true
          
      - match: ( )
        pop: true

  instruction_ulocate2:
    - match: ( )
      set:
      - match: \b(core|storage|generator|turret|factory|repair|battery|reactor)\b
        scope: keyword.operator.mlog
        pop: true
      - match: \b
        pop: true

  winstruction_getblock:
    - match: ( )
      set:
      - match: \b(floor|ore|block|building)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  winstruction_setblock:
    - match: ( )
      set:
      - match: \b(floor|ore|block)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  winstruction_status:
    - match: ( )
      set:
      - match: \b(true|false)\b
        scope: keyword.operator.mlog
        push: winstruction_status2
        pop: true
      - match: ( )
        pop: true
          

  winstruction_status2:
    - match: ( )
      set:
      - match: \b(burning|freezing|unmoving|wet|melting|sapped|electrified|spore-slowed|tarred|overdrive|overclock|boss|shocked|blasted|disarmed|invincible|slow|corroded|muddy)\b
        scope: keyword.operator.mlog
        pop: true
      - match: \b
        pop: true

  winstruction_setrule:
    - match: ( )
      set:
      - match: \b(currentWaveTime|waveTimer|waves|wave|waveSpacing|waveSending|attackMode|enemyCoreBuildRadius|dropSoneRadius|unitCap|mapArea|lighting|ambientLight|solarMultiplier|buildSpeed|unitBuildSpeed|unitCost|unitDamage|blockHealth|blockDamage|rtsMinWeight|rtsMinSquad)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  winstruction_message:
    - match: ( )
      set:
      - match: \b(notify|announce|toast|mission)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  winstruction_cutscene:
    - match: ( )
      set:
      - match: \b(pan|zoom|stop)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  winstruction_fetch:
    - match: ( )
      set:
      - match: \b(unit|unitCount|player|playerCount|core|coreCount|build|buildCount )\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  winstruction_effect:
    - match: ( )
      set:
      - match: \b(warn|cross|blockFall|placeBlock|placeBlockSpark|breakBlock|spawn|trail|breakProp|smokeCloud|vapor|hit|hitSquare|shootSmall|shootBig|smokeSmall|smokeBig|smokeColor|smokeSquare|smokeSquareBig|spark|sparkBig|sparkShoot|sparkShootBig|drill|drillBig|lightBlock|explosion|smokePuff|sparkExplosion|crossExplosion|wave|bubble)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  winstruction_makemarker:
    - match: ( )
      set:
      - match: \b.\b
      - match: \b(shapeText|minimap|shape|text|line|texture|quad)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  winstruction_setmarker:
    - match: ( )
      set:
      - match: \b(remove|setVisibility|toggleVisibility|text|flushText|x|y|pos|endX|endY|endPos|fontSize|textHeight|labelBackground|labelOutline|labelFlags|radius|stroke|rotation|shapeSides|shapeFill|shapeOutline|setShape|color)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  sfinstruction_gen_call:
    - match: \b(\S)+\b
      scope: variable.function.mlog
      pop: true

  sfinstruction_gen_define:
    - match: \b(\S)+\b
      scope: variable.function.mlog
      pop: true

  sfinstruction_gen_condition:
    - match: ( )
      set:
      - match: \b(equal|notEqual|lessThan|lessThanEq|greaterThan|greaterThanEq|strictEqual|always|in)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  sfinstruction_for:
    - match: ( )
      set:
      - match: \b(range|list|enumerate|table)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  sfinstruction_pop:
    - match: ( )
      set:
      - match: \b(add|sub|mul|div|idiv|mod|pow|equal|notEqual|land|lessThan|lessThanEq|greaterThan|greaterThanEq|strictEqual|shl|shr|or|and|xor|not|max|min|angle|len|noise|abs|log|log10|floor|ceil|sqrt|rand|sin|cos|tan|asin|acos|atan|angleDiff)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  sfinstruction_strop:
    - match: ( )
      set:
      - match: \b(cat|num|charat|substr|split|rematch|refine|regroups|rematchall)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  sfinstruction_strvar:
    - match: ( )
      set:
      - match: \b(local|global|unscoped)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  sfinstruction_list:
    - match: ( )
      set:
      - match: \b(from|copy|set|get|append|insert|del|len|index|in)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  sfinstruction_table:
    - match: ( )
      set:
      - match: \b(from|copy|set|get|del|in)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true

  sfinstruction_file:
    - match: ( )
      set:
      - match: \b(open|openbin|close|read|readbytes)\b
        scope: keyword.operator.mlog
        pop: true
      - match: ( )
        pop: true